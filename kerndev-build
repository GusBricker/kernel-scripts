#!/bin/bash
set -e; set -o pipefail; source kerndev-shared.sh

# If an argument is provided, it specifies a cross-compile target architecture.
target_arch=${1:-"x86_64"}

# Sanity checks.
[ ! -d $LINUX_DEV_PATH ] && fatal "can't find linux dev path at $LINUX_DEV_PATH"
[ ! -f $LINUX_DEV_PATH/REPORTING-BUGS ] && \
	fatal "Doesn't look like a linux dev path: $LINUX_DEV_PATH"
[ $EUID = 0 ] && fatal "Don't run as root, causes file ownership pain"

case $target_arch in
aarch64)
	# Make sure we have cross-compilers. `gcc` check should suffice.
	check_exists aarch64-linux-gnu-gcc

	# For now, always force a rebuild.
	REBUILD=y
	make_opts="ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu-"
	;;
"x86_64")
	;;
*)
	fatal "unknown architecture: $target_arch"
	;;
esac

# Ref: http://stackoverflow.com/a/6481016
cores=$(grep -c ^processor /proc/cpuinfo)

push_linux

echo Configuring kernel...

if [ ! -z "$REBUILD" ] || [ ! -f .config ]; then
	mak mrproper
	mak defconfig
fi

source kerndev-config
# Set any new options implied by kerndev-config to default.
mak olddefconfig

echo Compiling kernel...
# 1 extra thread to account for I/O waiting.
mak -j$((cores + 1))

if [ -z "$DONT_INSTALL" ]; then
	echo Installing kernel...
	NO_DONE=y sudo -E kerndev-install $target_arch
fi

pop

[ -z "$NO_DONE" ] && echo Done! || true
