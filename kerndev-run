#!/bin/bash
set -e; set -o pipefail; source kerndev-shared.sh

# Networking scripts adapted from
# https://github.com/lahwaacz/archlinux-dotfiles/blob/master/Scripts/qemu-launcher.sh

# If argument provided it specifies a cross-compile target architecture.
target_arch=${1:-"x86_64"}

tap_limit=10
br_nic="qemu-br0"
wan_nic="enp2s0"
mac="de:ad:be:ef:f0:0f"

# Functions.

function get_tap_name() {
	for (( i=0; i < $tap_limit; i++ )); do
		local name="tap$i"
		if [[ ! -d "/sys/class/net/$name" ]]; then
			echo "$name"
			break
		fi
	done
}

tap_nic=$(get_tap_name)

elevate $@

# We want access to the underlying user.
[ -z "$SUDO_USER" ] && fatal Please run this using sudo!

# TODO: Networking not yet working for aarch64.
net_opts="-net nic,model=virtio,macaddr=$mac
	 -net tap,ifname=$tap_nic,script=no,downscript=no"

case $target_arch in
aarch64)
	qemu=qemu-system-aarch64

	kernel=$LINUX_DEV_PATH/arch/arm64/boot/Image
	initrd=$KERNDEV_PATH/init_aarch64.img
	rootfs=$KERNDEV_PATH/rootfs_aarch64.img

	arch_opts="-machine virt
	-cpu cortex-a57
	-machine type=virt,kernel_irqchip=on
	-drive if=none,file=$rootfs,id=vda,format=raw
	-device virtio-blk-device,drive=vda"

	arch_append="console=ttyAMA0"
	;;
x86_64)
	qemu=qemu-system-x86_64

	kernel=$LINUX_DEV_PATH/arch/x86/boot/bzImage
	initrd=$KERNDEV_PATH/init.img
	rootfs=$KERNDEV_PATH/rootfs.img

	arch_opts="-enable-kvm
	-cpu host
	-drive file=$rootfs,if=virtio,cache=none,format=raw
	-boot once=c
	-initrd $initrd"
	arch_append="console=ttyS0"

	;;
*)
	fatal "unknown architecture: $target_arch"
	;;
esac

shared_opts="-nographic -m $QEMU_RAM -smp $QEMU_CORES -s"
shared_append="rw root=/dev/vda"

kerndev-qemu-tap-helper.sh $SUDO_USER $tap_nic $br_nic $wan_nic up
trap "kerndev-qemu-tap-helper.sh $SUDO_USER $tap_nic $br_nic $wan_nic down" EXIT

$qemu $shared_opts $arch_opts $net_opts $QEMU_CUSTOM_SETTINGS \
	-kernel $kernel -append "$shared_append $arch_append"
